#
# PRELIMINARIES -- on the "server"
#
# Build the container and then "run --name pfdcm " it.
# Depending on your purpose, choose either the Quick 'n dirty run --name pfdcm 
# or, while developing, choose the run --name pfdcm  with support for source debugging.
#

# Build (for fish shell syntax!)
set UID (id -u)
docker build --build-arg UID=$UID -t local/pfdcm .

# Quick 'n dirty run --name pfdcm  -- this is what you'll mostly do.
# Obviously change port mappings if needed (and in the Dockerfile)
docker run --name pfdcm  --rm -it      						\
        -p 4005:4005 -p 10402:10402 -p 5555:5555 -p 10502:10502 -p 11113:11113 	\
        local/pfdcm /start-reload.sh

# Quick 'n dirty run --name pfdcm  -- with volume mapping.
# Obviously change port mappings if needed (and in the Dockerfile)
docker run --name pfdcm  --rm -it -d                                            \
        -p 4005:4005 -p 10402:11113 -p 5555:5555 -p 10502:11113 -p 11113:11113  \
        -v /home/dicom:/home/dicom                                              \
        -v /neuro/users/chris/PACS:/neuro/users/chris/PACS                      \
        local/pfdcm /start-reload.sh

# Port mapping suitable for FNNDSC
# (same as above w/o 10402 for the edge case where an ssh tunnel might have
#  been created to connect port 10402 to port 11113. This was a historical
#  oddity and it really makes little sense to do an ssh tunnel join when
#  a docker portmap would suffice).
docker run --name pfdcm  --rm -it -d                                            \
        -p 4005:4005 -p 5555:5555 -p 10502:10502 -p 11113:11113                	\
        -v /home/dicom:/home/dicom                                             	\
        local/pfdcm /start-reload.sh

# Run with support for source debugging
docker run --name pfdcm  --rm -it                                              	\
        -p 4005:4005 -p 10402:11113 -p 5555:5555 -p 10502:10502 -p 11113:11113 	\
        -v /home/dicom:/home/dicom                                             	\
        -v $PWD/pfdcm:/app:ro                                                  	\
        local/pfdcm /start-reload.sh

#
# Once the container is up and run --name pfdcm ning, the services within the container
# need to be activted.
#
# Note that the internal port that receives DICOM file PUSH is port
# 1113. If your PACS server is configured to transmit data to another/different
# port, one easy solution is to simply create a tunnel from your target port
# to port 1113. For instance, assume that your PACS server sends to port 10402
# of the machine hosting `pfdcm`. Let's call this machine for argument's sake
# `titan.tch.harvard.edu`. Connect the two ports together:

ssh -g -f -N -X -L 10402:titan.tch.harvard.edu:11113 \
                rudolphpienaar@titan.tch.harvard.edu

# Of course, a better solution is to have the PACS send to the "correct" port
# from the get go. Alternatively, the internal `pfdcm` listening service can
# also be configure to use this port.

# Once the system has initiated, you need to set up some swift and CUBE keys.
# First, create a properly defined defaults.json (using of course your specific
# values where required):

    pfdcm.sh    --saveToJSON defaults.json                                     \
                --URL http://titan.tch.harvard.edu:4005                        \
                --serviceRoot /home/dicom                                      \
                --swiftKeyName titan                                           \
                    --swiftIP 10.26.67.203                                     \
                    --swiftPort 8080                                           \
                    --swiftLogin chris:chris1234                               \
                --PACS PACSDCM                                                 \
                    --aet CHRISV3                                              \
                    --aetl PACSDCM                                             \
                    --aec PACSDCM                                              \
                    --serverIP 134.174.12.21                                   \
                    --serverPort 104                                           \
                --cubeKeyName titan                                            \
                    --cubeURL http://10.26.67.203:8000/api/v1/                 \
                    --cubeUserName chris                                       \
                    --cubePACSservice PACSDCM                                  \
                    --cubeUserPassword chris1234 --

# Then, create persistent swift and CUBE data in the container
pfdcm.sh -u --swiftSetupDo --
pfdcm.sh -u --cubeSetupDo --

# Verify that swift.json and cube.json have been created in the `services` dir:
ls /home/dicom/services

# Note that the underlying infrastructure relies on a "poke" event to the pfdcm
# container xinetd on port 10502 to fire off the actual listener service that
# uses port 11113. This somewhat indirect approach was needed since the listener
# script couldn't be triggered by xinetd on the same port from which it
# also receives DICOM transmisstions.
pfdcm.sh -u -i --

# At this stage you should be able to perform queries/retrieves/status/etc. To
# see the actual http/curl comms that the agent transmits to the service, add
# a `-v 1` to the `pfdcm.sh` calls.
